import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import api from '../api/api';
import toast from 'react-hot-toast';
import {
  Users,
  Plus,
  Search,
  Filter,
  Edit,
  Lock,
  Unlock,
  Key,
  Eye,
  EyeOff,
  UserCheck,
  UserX,
  Mail,
  Phone,
  Building,
  Calendar,
  MoreVertical,
  Trash2,
  RefreshCw,
  Clock,
  AlertTriangle,
  CheckCircle,
  UserPlus,
  XCircle
} from 'lucide-react';

const UsersPage = () => {
  const queryClient = useQueryClient();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedRole, setSelectedRole] = useState('');
  const [selectedDepartment, setSelectedDepartment] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedUser, setSelectedUser] = useState(null);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [showUserDetails, setShowUserDetails] = useState(false);
  const [createMethod, setCreateMethod] = useState('direct'); // 'direct' or 'invitation'
  const [invitationLink, setInvitationLink] = useState('');
  const [emailDraft, setEmailDraft] = useState({
    subject: 'You\'re invited to join DSP Brand Protection Platform',
    body: 'Hello,\n\nYou have been invited to join our DSP Brand Protection Platform. Please click the link below to create your account and get started.\n\nBest regards,\nDSP Team'
  });
  const [autoGeneratedLink, setAutoGeneratedLink] = useState('');
  const [showInviteHistory, setShowInviteHistory] = useState(false);

  // Fetch users with filters
  const { data: usersData, isLoading, error } = useQuery(
    ['users', currentPage, searchTerm, selectedRole, selectedDepartment, selectedStatus],
    () => {
      const params = new URLSearchParams({
        page: currentPage,
        limit: 10,
        ...(searchTerm && { search: searchTerm }),
        ...(selectedRole && { role: selectedRole }),
        ...(selectedDepartment && { department: selectedDepartment }),
        ...(selectedStatus && { status: selectedStatus })
      });
      return api.get(`/api/users?${params}`).then(res => res.data);
    },
    {
      keepPreviousData: true
    }
  );

  // Fetch invitations
  const { data: invitationsData } = useQuery(
    ['invitations'],
    () => api.get('/api/invitations').then(res => res.data),
    {
      enabled: showInviteHistory
    }
  );

  // Fetch user statistics
  const { data: statsData } = useQuery(
    'userStats',
    () => api.get('/api/users/stats/overview').then(res => res.data)
  );

  // Update user mutation
  const updateUserMutation = useMutation(
    ({ userId, userData }) => api.put(`/api/users/${userId}`, userData),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('users');
        queryClient.invalidateQueries('userStats');
        toast.success('User updated successfully');
        setShowEditModal(false);
        setSelectedUser(null);
      },
      onError: (error) => {
        toast.error(error.response?.data?.message || 'Failed to update user');
      }
    }
  );

  // Change password mutation
  const changePasswordMutation = useMutation(
    ({ userId, newPassword }) => api.put(`/api/users/${userId}/password`, { newPassword }),
    {
      onSuccess: () => {
        toast.success('Password changed successfully');
        setShowPasswordModal(false);
        setSelectedUser(null);
      },
      onError: (error) => {
        toast.error(error.response?.data?.message || 'Failed to change password');
      }
    }
  );

  // Lock/Unlock user mutation
  const toggleLockMutation = useMutation(
    ({ userId, locked }) => api.put(`/api/users/${userId}/lock`, { locked }),
    {
      onSuccess: (response) => {
        queryClient.invalidateQueries('users');
        queryClient.invalidateQueries('userStats');
        toast.success(response.data.message);
      },
      onError: (error) => {
        toast.error(error.response?.data?.message || 'Failed to update user status');
      }
    }
  );

  // Create user mutation
  const createUserMutation = useMutation(
    (userData) => api.post('/api/users', userData),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('users');
        queryClient.invalidateQueries('userStats');
        toast.success('User created successfully');
        setShowCreateModal(false);
      },
      onError: (error) => {
        toast.error(error.response?.data?.message || 'Failed to create user');
      }
    }
  );

  // Deactivate user mutation
  const deactivateUserMutation = useMutation(
    (userId) => api.delete(`/api/users/${userId}`),
    {
      onSuccess: () => {
        queryClient.invalidateQueries('users');
        queryClient.invalidateQueries('userStats');
        toast.success('User deactivated successfully');
      },
      onError: (error) => {
        toast.error(error.response?.data?.message || 'Failed to deactivate user');
      }
    }
  );

  // Generate unique invitation link
  const generateInvitationLink = () => {
    const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    const link = `${window.location.origin}/invite/${token}`;
    setInvitationLink(link);
    return link;
  };

  // Create invitation mutation
  const createInvitationMutation = useMutation(
    (invitationData) => {
      // Generate a unique link for this invitation
      const token = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
      const link = `${window.location.origin}/invite/${token}`;
      setAutoGeneratedLink(link);
      
      // Include the link in the custom message
      const enhancedInvitationData = {
        ...invitationData,
        custom_message: invitationData.custom_message 
          ? `${invitationData.custom_message}\n\nInvitation Link: ${link}`
          : `You have been invited to join DSP Brand Protection Platform.\n\nPlease click the link below to create your account:\n${link}\n\nBest regards,\nDSP Team`
      };
      
      return api.post('/api/invitations', enhancedInvitationData);
    },
    {
      onSuccess: (response) => {
        queryClient.invalidateQueries('users');
        const link = response.data.invitation?.invitation_link || autoGeneratedLink;
        setInvitationLink(link);
        toast.success(`Invitation created successfully!`);
        
        // Close modal after 2 seconds to show the success message
        setTimeout(() => {
          handleCloseCreateModal();
        }, 2000);
      },
      onError: (error) => {
        toast.error(error.response?.data?.message || 'Failed to create invitation');
      }
    }
  );

  const handleEditUser = (user) => {
    setSelectedUser(user);
    setShowEditModal(true);
  };

  const handleCloseCreateModal = () => {
    setShowCreateModal(false);
    setCreateMethod('direct');
    setInvitationLink('');
    setAutoGeneratedLink('');
    setEmailDraft({
      subject: 'You\'re invited to join DSP Brand Protection Platform',
      body: 'Hello,\n\nYou have been invited to join our DSP Brand Protection Platform. Please click the link below to create your account and get started.\n\nBest regards,\nDSP Team'
    });
  };

  const handleChangePassword = (user) => {
    setSelectedUser(user);
    setShowPasswordModal(true);
  };

  const handleToggleLock = (user) => {
    const isLocked = user.lockUntil && user.lockUntil > Date.now();
    toggleLockMutation.mutate({ userId: user.id, locked: !isLocked });
  };

  const handleDeactivateUser = (user) => {
    if (window.confirm(`Are you sure you want to deactivate ${user.firstName} ${user.lastName}?`)) {
      deactivateUserMutation.mutate(user.id);
    }
  };


  const getRoleBadge = (role) => {
    const roleConfig = {
      admin: { color: 'bg-red-100 text-red-800', label: 'Admin' },
      legal: { color: 'bg-blue-100 text-blue-800', label: 'Legal' },
      manager: { color: 'bg-green-100 text-green-800', label: 'Manager' },
      staff: { color: 'bg-yellow-100 text-yellow-800', label: 'Staff' },
      viewer: { color: 'bg-gray-100 text-gray-800', label: 'Viewer' }
    };
    
    const config = roleConfig[role] || roleConfig.viewer;
    
    return (
      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${config.color}`}>
        {config.label}
      </span>
    );
  };

  const getStatusBadge = (user) => {
    const isLocked = user.lockUntil && user.lockUntil > Date.now();
    const isActive = user.isActive;
    
    if (isLocked) {
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
          <Lock className="h-3 w-3 mr-1" />
          Locked
        </span>
      );
    }
    
    if (isActive) {
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
          <UserCheck className="h-3 w-3 mr-1" />
          Active
        </span>
      );
    }
    
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
        <UserX className="h-3 w-3 mr-1" />
        Inactive
      </span>
    );
  };

  const getInvitationBadge = (user) => {
    if (!user.invitationStatus) {
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
          <UserCheck className="h-3 w-3 mr-1" />
          Active User
        </span>
      );
    }
    
    if (user.invitationStatus === 'accepted') {
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
          <CheckCircle className="h-3 w-3 mr-1" />
          Accepted
        </span>
      );
    }
    
    if (user.invitationStatus === 'pending') {
      const isExpired = user.invitationExpires && user.invitationExpires < Date.now();
      if (isExpired) {
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
            <AlertTriangle className="h-3 w-3 mr-1" />
            Expired
          </span>
        );
      }
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
          <Clock className="h-3 w-3 mr-1" />
          Pending
        </span>
      );
    }
    
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
        <UserX className="h-3 w-3 mr-1" />
        Unknown
      </span>
    );
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="loading-spinner" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-12">
        <Users className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-2 text-sm font-medium text-gray-900">Error loading users</h3>
        <p className="mt-1 text-sm text-gray-500">Please try again later.</p>
      </div>
    );
  }

  const { users, pagination } = usersData || { users: [], pagination: {} };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">User Management</h1>
          <p className="mt-1 text-sm text-gray-500">
            Manage user accounts, roles, and permissions
          </p>
        </div>
        <div className="flex space-x-3">
          <button
            onClick={() => setShowCreateModal(true)}
            className="btn-primary"
          >
            <Plus className="h-4 w-4 mr-2" />
            Add User
          </button>
          <button
            onClick={() => setShowInviteHistory(!showInviteHistory)}
            className="btn-outline"
          >
            <Mail className="h-4 w-4 mr-2" />
            {showInviteHistory ? 'Hide' : 'Show'} Invite Links
          </button>
        </div>
      </div>

      {/* Statistics Cards */}
      {statsData && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="card">
            <div className="card-body">
              <div className="flex items-center">
                <Users className="h-8 w-8 text-blue-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">Total Users</p>
                  <p className="text-2xl font-semibold text-gray-900">{statsData.totalUsers}</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="card">
            <div className="card-body">
              <div className="flex items-center">
                <UserCheck className="h-8 w-8 text-green-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">Active Users</p>
                  <p className="text-2xl font-semibold text-gray-900">{statsData.activeUsers}</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="card">
            <div className="card-body">
              <div className="flex items-center">
                <UserX className="h-8 w-8 text-gray-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">Inactive Users</p>
                  <p className="text-2xl font-semibold text-gray-900">{statsData.inactiveUsers}</p>
                </div>
              </div>
            </div>
          </div>
          
          <div className="card">
            <div className="card-body">
              <div className="flex items-center">
                <Building className="h-8 w-8 text-purple-600" />
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">Departments</p>
                  <p className="text-2xl font-semibold text-gray-900">{statsData.usersByDepartment?.length || 0}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Invite History Section */}
      {showInviteHistory && (
        <div className="card">
          <div className="card-body">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-medium text-gray-900">Latest Invitation Links</h3>
              <button
                onClick={() => queryClient.invalidateQueries('invitations')}
                className="text-sm text-blue-600 hover:text-blue-800"
              >
                <RefreshCw className="h-4 w-4 inline mr-1" />
                Refresh
              </button>
            </div>
            
            {invitationsData?.invitations?.length > 0 ? (
              <div className="space-y-3">
                {invitationsData.invitations
                  .filter(inv => inv.invitation_status === 'pending')
                  .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
                  .slice(0, 10)
                  .map((invitation) => (
                    <div key={invitation.id} className="border border-gray-200 rounded-lg p-4 bg-gray-50">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center space-x-3">
                            <div className="flex-shrink-0">
                              <div className="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center">
                                <Mail className="h-4 w-4 text-blue-600" />
                              </div>
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium text-gray-900 truncate">
                                {invitation.email}
                              </p>
                              <p className="text-sm text-gray-500">
                                {invitation.role} • {invitation.department} • {new Date(invitation.created_at).toLocaleDateString()}
                              </p>
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <div className="bg-white border rounded p-2 max-w-xs">
                            <code className="text-xs text-gray-600 break-all">
                              {invitation.custom_message?.includes('https://') 
                                ? invitation.custom_message.match(/https:\/\/[^\s]+/)?.[0] || 'No link found'
                                : 'No link found'
                              }
                            </code>
                          </div>
                          <button
                            onClick={() => {
                              const link = invitation.custom_message?.includes('https://') 
                                ? invitation.custom_message.match(/https:\/\/[^\s]+/)?.[0]
                                : null;
                              if (link) {
                                navigator.clipboard.writeText(link);
                                toast.success('Link copied to clipboard!');
                              }
                            }}
                            className="text-blue-600 hover:text-blue-800 text-sm"
                          >
                            📋 Copy
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            ) : (
              <div className="text-center py-8">
                <Mail className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500">No pending invitations found</p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Filters */}
      <div className="card">
        <div className="card-body">
          <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
            <div>
              <label className="form-label">Search</label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="form-input pl-10"
                  placeholder="Search users..."
                />
              </div>
            </div>
            
            <div>
              <label className="form-label">Role</label>
              <select
                value={selectedRole}
                onChange={(e) => setSelectedRole(e.target.value)}
                className="form-select"
              >
                <option value="">All Roles</option>
                <option value="admin">Admin</option>
                <option value="legal">Legal</option>
                <option value="manager">Manager</option>
                <option value="staff">Staff</option>
                <option value="viewer">Viewer</option>
              </select>
            </div>
            
            <div>
              <label className="form-label">Department</label>
              <select
                value={selectedDepartment}
                onChange={(e) => setSelectedDepartment(e.target.value)}
                className="form-select"
              >
                <option value="">All Departments</option>
                <option value="legal">Legal</option>
                <option value="marketing">Marketing</option>
                <option value="crr">CRR</option>
                <option value="management">Management</option>
                <option value="it">IT</option>
              </select>
            </div>
            
            <div>
              <label className="form-label">Status</label>
              <select
                value={selectedStatus}
                onChange={(e) => setSelectedStatus(e.target.value)}
                className="form-select"
              >
                <option value="">All Status</option>
                <option value="active">Active</option>
                <option value="inactive">Inactive</option>
              </select>
            </div>
            
            <div className="flex items-end">
              <button
                onClick={() => {
                  setSearchTerm('');
                  setSelectedRole('');
                  setSelectedDepartment('');
                  setSelectedStatus('');
                  setCurrentPage(1);
                }}
                className="btn-outline w-full"
              >
                <RefreshCw className="h-4 w-4 mr-2" />
                Clear Filters
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Users Table */}
      <div className="card">
        <div className="card-body p-0">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    User
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Role
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Department
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Invitation
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Last Login
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {users.map((user) => (
                  <tr key={user.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10">
                          <div className="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                            <span className="text-sm font-medium text-gray-700">
                              {user.firstName.charAt(0)}{user.lastName.charAt(0)}
                            </span>
                          </div>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">
                            {user.firstName} {user.lastName}
                          </div>
                          <div className="text-sm text-gray-500">{user.email}</div>
                          {user.jobTitle && (
                            <div className="text-xs text-gray-400">{user.jobTitle}</div>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getRoleBadge(user.role)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {user.department}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(user)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getInvitationBadge(user)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : 'Never'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <button
                          onClick={() => {
                            setSelectedUser(user);
                            setShowUserDetails(true);
                          }}
                          className="text-gray-400 hover:text-gray-600"
                          title="View Details"
                        >
                          <Eye className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => handleEditUser(user)}
                          className="text-blue-600 hover:text-blue-900"
                          title="Edit User"
                        >
                          <Edit className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => handleChangePassword(user)}
                          className="text-yellow-600 hover:text-yellow-900"
                          title="Change Password"
                        >
                          <Key className="h-4 w-4" />
                        </button>
                        <button
                          onClick={() => handleToggleLock(user)}
                          className={user.lockUntil && user.lockUntil > Date.now() 
                            ? "text-green-600 hover:text-green-900" 
                            : "text-red-600 hover:text-red-900"
                          }
                          title={user.lockUntil && user.lockUntil > Date.now() ? "Unlock User" : "Lock User"}
                        >
                          {user.lockUntil && user.lockUntil > Date.now() ? (
                            <Unlock className="h-4 w-4" />
                          ) : (
                            <Lock className="h-4 w-4" />
                          )}
                        </button>
                        <button
                          onClick={() => handleDeactivateUser(user)}
                          className="text-red-600 hover:text-red-900"
                          title="Deactivate User"
                        >
                          <Trash2 className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* Pagination */}
      {pagination && pagination.pages > 1 && (
        <div className="flex items-center justify-between">
          <div className="text-sm text-gray-700">
            Showing {((pagination.page - 1) * pagination.limit) + 1} to{' '}
            {Math.min(pagination.page * pagination.limit, pagination.total)} of{' '}
            {pagination.total} results
          </div>
          <div className="flex space-x-2">
            <button
              onClick={() => setCurrentPage(currentPage - 1)}
              disabled={currentPage === 1}
              className="btn-outline disabled:opacity-50"
            >
              Previous
            </button>
            <span className="px-3 py-2 text-sm text-gray-700">
              Page {pagination.page} of {pagination.pages}
            </span>
            <button
              onClick={() => setCurrentPage(currentPage + 1)}
              disabled={currentPage === pagination.pages}
              className="btn-outline disabled:opacity-50"
            >
              Next
            </button>
          </div>
        </div>
      )}

      {/* Create User Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Add New User</h3>
              
              {/* Method Selection Tabs */}
              <div className="flex mb-4 border-b">
                <button
                  type="button"
                  onClick={() => setCreateMethod('direct')}
                  className={`px-4 py-2 text-sm font-medium ${
                    createMethod === 'direct'
                      ? 'border-b-2 border-blue-500 text-blue-600'
                      : 'text-gray-500 hover:text-gray-700'
                  }`}
                >
                  <Plus className="h-4 w-4 inline mr-1" />
                  Create Directly
                </button>
                <button
                  type="button"
                  onClick={() => setCreateMethod('invitation')}
                  className={`px-4 py-2 text-sm font-medium ${
                    createMethod === 'invitation'
                      ? 'border-b-2 border-blue-500 text-blue-600'
                      : 'text-gray-500 hover:text-gray-700'
                  }`}
                >
                  <UserPlus className="h-4 w-4 inline mr-1" />
                  Send Invitation
                </button>
              </div>

              <p className="text-sm text-gray-600 mb-4">
                {createMethod === 'direct' 
                  ? 'Create a user account with full details immediately.'
                  : 'Send an email invitation for the user to complete their own registration.'}
              </p>

              <form onSubmit={(e) => {
                e.preventDefault();
                const formData = new FormData(e.target);
                
                if (createMethod === 'invitation') {
                  const invitationData = {
                    email: formData.get('email'),
                    role: formData.get('role'),
                    department: formData.get('department'),
                    job_title: formData.get('jobTitle'),
                    custom_message: formData.get('custom_message')
                  };
                  createInvitationMutation.mutate(invitationData);
                } else {
                  const userData = {
                    firstName: formData.get('firstName'),
                    lastName: formData.get('lastName'),
                    email: formData.get('email'),
                    password: formData.get('password'),
                    role: formData.get('role'),
                    department: formData.get('department'),
                    phone: formData.get('phone'),
                    jobTitle: formData.get('jobTitle')
                  };
                  createUserMutation.mutate(userData);
                }
              }}>
                <div className="space-y-4">
                  {/* Common fields for both methods */}
                  {createMethod === 'direct' && (
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="form-label">First Name *</label>
                        <input name="firstName" required className="form-input" />
                      </div>
                      <div>
                        <label className="form-label">Last Name *</label>
                        <input name="lastName" required className="form-input" />
                      </div>
                    </div>
                  )}
                  
                  <div>
                    <label className="form-label">Email *</label>
                    <input name="email" type="email" required className="form-input" />
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="form-label">Role *</label>
                      <select name="role" required className="form-select">
                        <option value="">Select Role</option>
                        <option value="admin">Admin</option>
                        <option value="legal">Legal</option>
                        <option value="manager">Manager</option>
                        <option value="staff">Staff</option>
                        <option value="viewer">Viewer</option>
                        <option value="analyst">Analyst</option>
                      </select>
                    </div>
                    <div>
                      <label className="form-label">Department</label>
                      <select name="department" className="form-select">
                        <option value="">Select Department</option>
                        <option value="legal">Legal</option>
                        <option value="marketing">Marketing</option>
                        <option value="crr">CRR</option>
                        <option value="management">Management</option>
                        <option value="it">IT</option>
                      </select>
                    </div>
                  </div>
                  
                  <div>
                    <label className="form-label">Job Title</label>
                    <input name="jobTitle" className="form-input" />
                  </div>
                  
                  {createMethod === 'direct' && (
                    <div>
                      <label className="form-label">Password *</label>
                      <input name="password" type="password" required className="form-input" placeholder="Enter password" />
                    </div>
                  )}
                  
                  {createMethod === 'direct' && (
                    <div>
                      <label className="form-label">Phone</label>
                      <input name="phone" className="form-input" />
                    </div>
                  )}
                  
                  {createMethod === 'invitation' && (
                    <div>
                      <label className="form-label">Custom Message (Optional)</label>
                      <textarea 
                        name="custom_message" 
                        rows={3}
                        className="form-input"
                        placeholder="Optional welcome message for the invited user. The invitation link will be automatically added to your message."
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        💡 The invitation link will be automatically generated and added to your message when you send the invitation.
                      </p>
                    </div>
                  )}
                </div>
                
                {/* Display Generated Invitation Link */}
                {invitationLink && (
                  <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                    <div className="flex items-center mb-3">
                      <CheckCircle className="h-5 w-5 text-green-600 mr-2" />
                      <span className="text-sm font-medium text-green-800">Invitation Created Successfully!</span>
                    </div>
                    
                    <div className="mb-3">
                      <label className="text-sm font-medium text-green-800 mb-2 block">Invitation Link:</label>
                      <div className="bg-white border rounded p-3">
                        <code className="text-xs text-gray-600 break-all">{invitationLink}</code>
                      </div>
                    </div>
                    
                    <div className="mb-3">
                      <label className="text-sm font-medium text-green-800 mb-2 block">Message Sent to User:</label>
                      <div className="bg-white border rounded p-3">
                        <pre className="text-xs text-gray-700 whitespace-pre-wrap">
                          {createInvitationMutation.data?.data?.invitation?.custom_message || 'Default invitation message with link'}
                        </pre>
                      </div>
                    </div>
                    
                    <div className="flex space-x-2">
                      <button
                        type="button"
                        onClick={() => navigator.clipboard.writeText(invitationLink)}
                        className="text-sm text-green-600 hover:text-green-800 font-medium"
                      >
                        📋 Copy Link
                      </button>
                      <button
                        type="button"
                        onClick={() => window.open(invitationLink, '_blank')}
                        className="text-sm text-green-600 hover:text-green-800 font-medium"
                      >
                        🔗 Open Link
                      </button>
                      <button
                        type="button"
                        onClick={() => navigator.clipboard.writeText(createInvitationMutation.data?.data?.invitation?.custom_message || '')}
                        className="text-sm text-green-600 hover:text-green-800 font-medium"
                      >
                        📋 Copy Message
                      </button>
                    </div>
                  </div>
                )}
                
                <div className="flex justify-end space-x-3 mt-6">
                  <button
                    type="button"
                    onClick={handleCloseCreateModal}
                    className="btn-outline"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={createUserMutation.isLoading || createInvitationMutation.isLoading}
                    className="btn-primary"
                  >
                    {createMethod === 'invitation' 
                      ? (createInvitationMutation.isLoading ? 'Sending Invitation...' : 'Send Invitation')
                      : (createUserMutation.isLoading ? 'Creating User...' : 'Create User')}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Edit User Modal */}
      {showEditModal && selectedUser && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Edit User</h3>
              <form onSubmit={(e) => {
                e.preventDefault();
                const formData = new FormData(e.target);
                const userData = {
                  firstName: formData.get('firstName'),
                  lastName: formData.get('lastName'),
                  email: formData.get('email'),
                  role: formData.get('role'),
                  department: formData.get('department'),
                  phone: formData.get('phone'),
                  jobTitle: formData.get('jobTitle'),
                  isActive: formData.get('isActive') === 'on'
                };
                updateUserMutation.mutate({ userId: selectedUser.id, userData });
              }}>
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="form-label">First Name *</label>
                      <input name="firstName" defaultValue={selectedUser.firstName} required className="form-input" />
                    </div>
                    <div>
                      <label className="form-label">Last Name *</label>
                      <input name="lastName" defaultValue={selectedUser.lastName} required className="form-input" />
                    </div>
                  </div>
                  
                  <div>
                    <label className="form-label">Email *</label>
                    <input name="email" type="email" defaultValue={selectedUser.email} required className="form-input" />
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="form-label">Role *</label>
                      <select name="role" defaultValue={selectedUser.role} required className="form-select">
                        <option value="admin">Admin</option>
                        <option value="legal">Legal</option>
                        <option value="manager">Manager</option>
                        <option value="staff">Staff</option>
                        <option value="viewer">Viewer</option>
                      </select>
                    </div>
                    <div>
                      <label className="form-label">Department *</label>
                      <select name="department" defaultValue={selectedUser.department} required className="form-select">
                        <option value="legal">Legal</option>
                        <option value="marketing">Marketing</option>
                        <option value="crr">CRR</option>
                        <option value="management">Management</option>
                        <option value="it">IT</option>
                      </select>
                    </div>
                  </div>
                  
                  <div>
                    <label className="form-label">Job Title</label>
                    <input name="jobTitle" defaultValue={selectedUser.jobTitle || ''} className="form-input" />
                  </div>
                  
                  <div>
                    <label className="form-label">Phone</label>
                    <input name="phone" defaultValue={selectedUser.phone || ''} className="form-input" />
                  </div>
                  
                  <div className="flex items-center">
                    <input
                      name="isActive"
                      type="checkbox"
                      defaultChecked={selectedUser.isActive}
                      className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    />
                    <label className="ml-2 block text-sm text-gray-900">Active User</label>
                  </div>
                </div>
                
                <div className="flex justify-end space-x-3 mt-6">
                  <button
                    type="button"
                    onClick={() => {
                      setShowEditModal(false);
                      setSelectedUser(null);
                    }}
                    className="btn-outline"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={updateUserMutation.isLoading}
                    className="btn-primary"
                  >
                    {updateUserMutation.isLoading ? 'Updating...' : 'Update User'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* Change Password Modal */}
      {showPasswordModal && selectedUser && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <h3 className="text-lg font-medium text-gray-900 mb-4">Change Password</h3>
              <p className="text-sm text-gray-600 mb-4">
                Change password for {selectedUser.firstName} {selectedUser.lastName}
              </p>
              <form onSubmit={(e) => {
                e.preventDefault();
                const formData = new FormData(e.target);
                const newPassword = formData.get('newPassword');
                changePasswordMutation.mutate({ userId: selectedUser.id, newPassword });
              }}>
                <div>
                  <label className="form-label">New Password *</label>
                  <input
                    name="newPassword"
                    type="password"
                    required
                    minLength="6"
                    className="form-input"
                    placeholder="Enter new password"
                  />
                </div>
                
                <div className="flex justify-end space-x-3 mt-6">
                  <button
                    type="button"
                    onClick={() => {
                      setShowPasswordModal(false);
                      setSelectedUser(null);
                    }}
                    className="btn-outline"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    disabled={changePasswordMutation.isLoading}
                    className="btn-primary"
                  >
                    {changePasswordMutation.isLoading ? 'Changing...' : 'Change Password'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}

      {/* User Details Modal */}
      {showUserDetails && selectedUser && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <h3 className="text-lg font-medium text-gray-900 mb-4">User Details</h3>
              <div className="space-y-4">
                <div className="flex items-center space-x-4">
                  <div className="h-16 w-16 rounded-full bg-gray-300 flex items-center justify-center">
                    <span className="text-lg font-medium text-gray-700">
                      {selectedUser.firstName.charAt(0)}{selectedUser.lastName.charAt(0)}
                    </span>
                  </div>
                  <div>
                    <h4 className="text-lg font-medium text-gray-900">
                      {selectedUser.firstName} {selectedUser.lastName}
                    </h4>
                    <p className="text-sm text-gray-500">{selectedUser.email}</p>
                    {getRoleBadge(selectedUser.role)}
                  </div>
                </div>
                
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-gray-500">Department:</span>
                    <p className="text-gray-900">{selectedUser.department}</p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-500">Job Title:</span>
                    <p className="text-gray-900">{selectedUser.jobTitle || 'N/A'}</p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-500">Phone:</span>
                    <p className="text-gray-900">{selectedUser.phone || 'N/A'}</p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-500">Status:</span>
                    <div className="mt-1">{getStatusBadge(selectedUser)}</div>
                  </div>
                  <div>
                    <span className="font-medium text-gray-500">Last Login:</span>
                    <p className="text-gray-900">
                      {selectedUser.lastLogin ? new Date(selectedUser.lastLogin).toLocaleString() : 'Never'}
                    </p>
                  </div>
                  <div>
                    <span className="font-medium text-gray-500">Created:</span>
                    <p className="text-gray-900">
                      {new Date(selectedUser.createdAt).toLocaleDateString()}
                    </p>
                  </div>
                </div>
                
                <div className="pt-4 border-t">
                  <h5 className="font-medium text-gray-900 mb-2">Permissions</h5>
                  <div className="text-sm text-gray-600">
                    {selectedUser.role === 'admin' && 'Full system access'}
                    {selectedUser.role === 'legal' && 'View incidents, edit incidents, create documents, send legal actions, view reports'}
                    {selectedUser.role === 'manager' && 'View incidents, edit incidents, assign cases, view reports'}
                    {selectedUser.role === 'staff' && 'View incidents, create incidents, edit own incidents'}
                    {selectedUser.role === 'viewer' && 'View incidents only'}
                  </div>
                </div>
              </div>
              
              <div className="flex justify-end space-x-3 mt-6">
                <button
                  onClick={() => {
                    setShowUserDetails(false);
                    setSelectedUser(null);
                  }}
                  className="btn-outline"
                >
                  Close
                </button>
                <button
                  onClick={() => {
                    setShowUserDetails(false);
                    handleEditUser(selectedUser);
                  }}
                  className="btn-primary"
                >
                  Edit User
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default UsersPage;